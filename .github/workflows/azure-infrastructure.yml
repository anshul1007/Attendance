name: Setup Azure Infrastructure

on:
  workflow_dispatch:  # Manual trigger only
    inputs:
      environment:
        description: 'Environment (prod, dev, staging)'
        required: true
        default: 'prod'
        type: choice
        options:
          - prod
          - dev
          - staging
      location:
        description: 'Azure Region'
        required: true
        default: 'westeurope'
        type: choice
        options:
          - westeurope
          - northeurope
          - germanywestcentral
          - francecentral
          - uksouth
          - eastus
          - westus2

jobs:
  create-infrastructure:
    runs-on: ubuntu-latest
    
    steps:
    - name: 🔄 Checkout code
      uses: actions/checkout@v4

    - name: 🔐 Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: � Register Azure Resource Providers
      run: |
        echo "Registering required Azure resource providers..."
        
        # Register all required providers
        az provider register --namespace Microsoft.Sql --wait
        az provider register --namespace Microsoft.Web --wait
        az provider register --namespace Microsoft.Storage --wait
        az provider register --namespace Microsoft.Insights --wait
        
        # Verify registration status
        echo "✅ Microsoft.Sql: $(az provider show --namespace Microsoft.Sql --query "registrationState" -o tsv)"
        echo "✅ Microsoft.Web: $(az provider show --namespace Microsoft.Web --query "registrationState" -o tsv)"
        echo "✅ Microsoft.Storage: $(az provider show --namespace Microsoft.Storage --query "registrationState" -o tsv)"
        echo "✅ Microsoft.Insights: $(az provider show --namespace Microsoft.Insights --query "registrationState" -o tsv)"
        
        echo "✅ All resource providers registered successfully"

    - name:  Create Resource Group
      run: |
        ENV="${{ github.event.inputs.environment }}"
        RESOURCE_GROUP="vermillion-attendance-${ENV}-rg"
        
        echo "Creating Resource Group: $RESOURCE_GROUP"
        az group create \
          --name $RESOURCE_GROUP \
          --location ${{ github.event.inputs.location }}
        
        echo "RESOURCE_GROUP=$RESOURCE_GROUP" >> $GITHUB_ENV
        echo "✅ Resource Group created: $RESOURCE_GROUP"

    - name: 💾 Create Azure SQL Server
      run: |
        ENV="${{ github.event.inputs.environment }}"
        SQL_SERVER_NAME="vermillion-sql-${ENV}"
        SQL_ADMIN_USER="sqladmin"
        SQL_ADMIN_PASSWORD="${{ secrets.SQL_ADMIN_PASSWORD_PROD }}"
        LOCATION="${{ github.event.inputs.location }}"
        
        echo "======================================"
        echo "SQL Server Setup: $SQL_SERVER_NAME"
        echo "======================================"
        
        # Check if SQL server already exists in current resource group
        echo "Checking if SQL Server exists in resource group: ${{ env.RESOURCE_GROUP }}..."
        
        set +e
        SERVER_CHECK=$(az sql server show --name $SQL_SERVER_NAME --resource-group ${{ env.RESOURCE_GROUP }} --query "name" -o tsv 2>/dev/null)
        CHECK_RESULT=$?
        set -e
        
        if [ $CHECK_RESULT -eq 0 ] && [ "$SERVER_CHECK" = "$SQL_SERVER_NAME" ]; then
          echo "✅ SQL Server already exists in this resource group: $SQL_SERVER_NAME"
          EXISTING_LOCATION=$(az sql server show --name $SQL_SERVER_NAME --resource-group ${{ env.RESOURCE_GROUP }} --query "location" -o tsv)
          echo "   Location: $EXISTING_LOCATION"
          echo "   ⏭️  Skipping SQL Server creation"
          LOCATION=$EXISTING_LOCATION
          
          # Set environment variables and skip to end
          echo "SQL_SERVER_NAME=$SQL_SERVER_NAME" >> $GITHUB_ENV
          echo "SQL_LOCATION=$LOCATION" >> $GITHUB_ENV
          echo "SQL_ADMIN_USER=$SQL_ADMIN_USER" >> $GITHUB_ENV
          echo "ENVIRONMENT=$ENV" >> $GITHUB_ENV
          
          echo ""
          echo "======================================"
          echo "✅ SQL Server Ready (Existing)"
          echo "======================================"
          echo "Name: $SQL_SERVER_NAME"
          echo "Location: $LOCATION"
          echo "Resource Group: ${{ env.RESOURCE_GROUP }}"
          echo ""
        else
          echo "SQL Server not found in current resource group. Creating new server..."
          echo ""
          
          # Validate password exists
          if [ -z "$SQL_ADMIN_PASSWORD" ]; then
            echo "❌ ERROR: SQL_ADMIN_PASSWORD_PROD secret is not set!"
            echo ""
            echo "Please add this secret in GitHub:"
            echo "  Settings → Secrets and variables → Actions → New repository secret"
            echo "  Name: SQL_ADMIN_PASSWORD_PROD"
            echo "  Value: Your strong password (8+ chars, uppercase, lowercase, number, special char)"
            exit 1
          fi
          
          # Try to create SQL Server
          echo "Attempting to create SQL Server in: $LOCATION"
          echo "Server name: $SQL_SERVER_NAME"
          echo "Admin user: $SQL_ADMIN_USER"
          echo ""
          
          set +e  # Temporarily disable exit on error
          CREATE_OUTPUT=$(az sql server create \
            --name $SQL_SERVER_NAME \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --location $LOCATION \
            --admin-user $SQL_ADMIN_USER \
            --admin-password "$SQL_ADMIN_PASSWORD" 2>&1)
          
          CREATE_RESULT=$?
          set -e  # Re-enable exit on error
          
          if [ $CREATE_RESULT -eq 0 ]; then
            echo "✅ SQL Server created successfully in $LOCATION"
          else
            echo "⚠️  Failed to create in $LOCATION"
            echo "Error details:"
            echo "$CREATE_OUTPUT"
            echo ""
            echo "Trying alternative European regions (skipping westeurope due to capacity issues)..."
            
            SUCCESS=false
            # Skip westeurope, start with northeurope and other European regions
            for ALT_LOCATION in northeurope uksouth ukwest francecentral francesouth germanywestcentral germanynorth swedencentral norwayeast switzerlandnorth switzerlandwest polandcentral italynorth spaincentral; do
              echo ""
              echo "Trying region: $ALT_LOCATION"
              
              set +e  # Disable exit on error for this command
              ALT_OUTPUT=$(az sql server create \
                --name $SQL_SERVER_NAME \
                --resource-group ${{ env.RESOURCE_GROUP }} \
                --location $ALT_LOCATION \
                --admin-user $SQL_ADMIN_USER \
                --admin-password "$SQL_ADMIN_PASSWORD" 2>&1)
              
              ALT_RESULT=$?
              set -e  # Re-enable exit on error
              
              if [ $ALT_RESULT -eq 0 ]; then
                echo "✅ SQL Server created successfully in $ALT_LOCATION"
                LOCATION=$ALT_LOCATION
                SUCCESS=true
                break
              else
                echo "   ❌ Failed in $ALT_LOCATION"
                echo "   Error: $(echo $ALT_OUTPUT | head -n 2)"
              fi
            done
            
            if [ "$SUCCESS" = false ]; then
              echo ""
              echo "======================================"
              echo "❌ FAILED: Could not create SQL Server"
              echo "======================================"
              echo ""
              echo "Attempted regions: $LOCATION, northeurope, francecentral, uksouth, germanywestcentral, swedencentral, eastus, westus2"
              echo ""
              echo "Last error output:"
              echo "$CREATE_OUTPUT"
              echo ""
              echo "Common causes:"
              echo "1. SQL password doesn't meet complexity requirements"
              echo "   - Minimum 8 characters"
              echo "   - Must contain uppercase, lowercase, number, and special character"
              echo ""
              echo "2. Azure subscription quotas reached"
              echo "3. Regional capacity issues in all regions"
              echo ""
              echo "Troubleshooting:"
              echo "1. Verify SQL_ADMIN_PASSWORD_PROD secret meets requirements"
              echo "2. Check Azure quotas: https://portal.azure.com → Subscriptions → Usage + quotas"
              echo "3. Try a different region or wait and retry later"
              exit 1
            fi
          fi
          
          # Set environment variables after successful creation
          echo ""
          echo "======================================"
          echo "✅ SQL Server Ready (Newly Created)"
          echo "======================================"
          echo "Name: $SQL_SERVER_NAME"
          echo "Location: $LOCATION"
          echo "Resource Group: ${{ env.RESOURCE_GROUP }}"
          echo ""
          
          echo "SQL_SERVER_NAME=$SQL_SERVER_NAME" >> $GITHUB_ENV
          echo "SQL_LOCATION=$LOCATION" >> $GITHUB_ENV
          echo "SQL_ADMIN_USER=$SQL_ADMIN_USER" >> $GITHUB_ENV
          echo "ENVIRONMENT=$ENV" >> $GITHUB_ENV
        fi

    - name: 🔥 Configure SQL Server Firewall
      run: |
        # Allow Azure services (create or update)
        az sql server firewall-rule create \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --server ${{ env.SQL_SERVER_NAME }} \
          --name AllowAzureServices \
          --start-ip-address 0.0.0.0 \
          --end-ip-address 0.0.0.0 \
          2>/dev/null || az sql server firewall-rule update \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --server ${{ env.SQL_SERVER_NAME }} \
          --name AllowAzureServices \
          --start-ip-address 0.0.0.0 \
          --end-ip-address 0.0.0.0
        
        echo "✅ Firewall rule configured"

    - name: 💿 Create SQL Database
      run: |
        # Check if database already exists
        if az sql db show --name AttendanceDB --server ${{ env.SQL_SERVER_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} 2>/dev/null; then
          echo "✅ Database already exists: AttendanceDB"
        else
          echo "Creating database: AttendanceDB"
          az sql db create \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --server ${{ env.SQL_SERVER_NAME }} \
            --name AttendanceDB \
            --service-objective Basic \
            --backup-storage-redundancy Local \
            --no-wait
          echo "✅ Database creation started"
        fi

    - name: 🌐 Create App Service Plan
      run: |
        ENV="${{ github.event.inputs.environment }}"
        APP_PLAN_NAME="vermillion-attendance-plan-${ENV}"
        
        # Check if App Service Plan already exists
        if az appservice plan show --name $APP_PLAN_NAME --resource-group ${{ env.RESOURCE_GROUP }} 2>/dev/null; then
          echo "✅ App Service Plan already exists: $APP_PLAN_NAME"
        else
          echo "Creating App Service Plan: $APP_PLAN_NAME"
          az appservice plan create \
            --name $APP_PLAN_NAME \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --location ${{ env.SQL_LOCATION }} \
            --sku B1 \
            --is-linux
          echo "✅ App Service Plan created: $APP_PLAN_NAME"
        fi
        
        echo "APP_PLAN_NAME=$APP_PLAN_NAME" >> $GITHUB_ENV

    - name: 🚀 Create Web App (Backend)
      run: |
        ENV="${{ github.event.inputs.environment }}"
        WEBAPP_NAME="vermillion-api-${ENV}"
        
        # Check if Web App already exists
        if az webapp show --name $WEBAPP_NAME --resource-group ${{ env.RESOURCE_GROUP }} 2>/dev/null; then
          echo "✅ Web App already exists: $WEBAPP_NAME"
        else
          echo "Creating Web App: $WEBAPP_NAME"
          az webapp create \
            --name $WEBAPP_NAME \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --plan ${{ env.APP_PLAN_NAME }} \
            --runtime "DOTNETCORE:8.0"
          echo "✅ Web App created: $WEBAPP_NAME"
        fi
        
        echo "WEBAPP_NAME=$WEBAPP_NAME" >> $GITHUB_ENV

    - name: 🔗 Configure Connection String
      run: |
        CONNECTION_STRING="Server=tcp:${{ env.SQL_SERVER_NAME }}.database.windows.net,1433;Initial Catalog=AttendanceDB;User ID=sqladmin;Password=${{ secrets.SQL_ADMIN_PASSWORD_PROD }};Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;"
        
        az webapp config connection-string set \
          --name ${{ env.WEBAPP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --connection-string-type SQLAzure \
          --settings DefaultConnection="$CONNECTION_STRING"
        
        echo "✅ Connection string configured"

    - name: ⚙️ Configure App Settings
      run: |
        az webapp config appsettings set \
          --name ${{ env.WEBAPP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --settings \
            ASPNETCORE_ENVIRONMENT="Production" \
            WEBSITE_RUN_FROM_PACKAGE="1"
        
        echo "✅ App settings configured"

    - name: 📱 Create Static Web App (Frontend)
      run: |
        ENV="${{ github.event.inputs.environment }}"
        STATIC_APP_NAME="vermillion-web-${ENV}"
        
        # Check if Static Web App already exists
        if az staticwebapp show --name $STATIC_APP_NAME --resource-group ${{ env.RESOURCE_GROUP }} 2>/dev/null; then
          echo "✅ Static Web App already exists: $STATIC_APP_NAME"
        else
          echo "Creating Static Web App: $STATIC_APP_NAME"
          az staticwebapp create \
            --name $STATIC_APP_NAME \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --location ${{ github.event.inputs.location }} \
            --sku Free
          echo "✅ Static Web App created: $STATIC_APP_NAME"
        fi
        
        echo "STATIC_APP_NAME=$STATIC_APP_NAME" >> $GITHUB_ENV

    - name: 📝 Get Deployment URLs
      run: |
        BACKEND_URL="https://${{ env.WEBAPP_NAME }}.azurewebsites.net"
        STATIC_APP_URL=$(az staticwebapp show \
          --name ${{ env.STATIC_APP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --query "defaultHostname" -o tsv)
        
        echo "=========================================="
        echo "✅ INFRASTRUCTURE CREATED SUCCESSFULLY!"
        echo "=========================================="
        echo ""
        echo "🌍 Environment: ${{ github.event.inputs.environment }}"
        echo "� Resource Group: ${{ env.RESOURCE_GROUP }}"
        echo "�📱 Frontend URL: https://$STATIC_APP_URL"
        echo "🔧 Backend URL: $BACKEND_URL"
        echo "💾 SQL Server: ${{ env.SQL_SERVER_NAME }}.database.windows.net"
        echo "🌍 SQL Location: ${{ env.SQL_LOCATION }}"
        echo "🌍 Primary Location: ${{ github.event.inputs.location }}"
        echo ""
        echo "=========================================="
        echo "📋 NEXT STEPS:"
        echo "=========================================="
        echo ""
        echo "1. Add these secrets to your GitHub repository:"
        echo "   - Go to: Settings → Secrets and variables → Actions"
        echo ""
        echo "2. Add AZURE_WEBAPP_PUBLISH_PROFILE_PROD:"
        echo "   Run: az webapp deployment list-publishing-profiles --name ${{ env.WEBAPP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --xml"
        echo ""
        echo "3. Add AZURE_STATIC_WEB_APPS_API_TOKEN_PROD:"
        echo "   Run: az staticwebapp secrets list --name ${{ env.STATIC_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query 'properties.apiKey' -o tsv"
        echo ""
        echo "4. Update frontend/src/environments/environment.prod.ts:"
        echo "   apiUrl: '$BACKEND_URL/api'"
        echo ""
        echo "5. Run 'Deploy Backend to Azure' workflow"
        echo "6. Run 'Deploy Frontend to Azure' workflow"
        echo "=========================================="
        echo ""
        echo "💰 Monthly Cost: ~$18 USD"
        echo "🌍 Location: ${{ github.event.inputs.location }}"
        echo "=========================================="
