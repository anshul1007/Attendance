name: Setup Azure Infrastructure

on:
  workflow_dispatch:  # Manual trigger only
    inputs:
      resource_group:
        description: 'Resource Group Name'
        required: true
        default: 'vermillion-attendance-rg'
      location:
        description: 'Azure Region'
        required: true
        default: 'westeurope'
        type: choice
        options:
          - westeurope
          - northeurope
          - germanywestcentral
          - francecentral
          - uksouth
          - eastus
          - westus2

jobs:
  create-infrastructure:
    runs-on: ubuntu-latest
    
    steps:
    - name: üîÑ Checkout code
      uses: actions/checkout@v4

    - name: üîê Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: ÔøΩ Register Azure Resource Providers
      run: |
        echo "Registering required Azure resource providers..."
        
        # Register all required providers
        az provider register --namespace Microsoft.Sql --wait
        az provider register --namespace Microsoft.Web --wait
        az provider register --namespace Microsoft.Storage --wait
        az provider register --namespace Microsoft.Insights --wait
        
        # Verify registration status
        echo "‚úÖ Microsoft.Sql: $(az provider show --namespace Microsoft.Sql --query "registrationState" -o tsv)"
        echo "‚úÖ Microsoft.Web: $(az provider show --namespace Microsoft.Web --query "registrationState" -o tsv)"
        echo "‚úÖ Microsoft.Storage: $(az provider show --namespace Microsoft.Storage --query "registrationState" -o tsv)"
        echo "‚úÖ Microsoft.Insights: $(az provider show --namespace Microsoft.Insights --query "registrationState" -o tsv)"
        
        echo "‚úÖ All resource providers registered successfully"

    - name: ÔøΩüìã Create Resource Group
      run: |
        az group create \
          --name ${{ github.event.inputs.resource_group }} \
          --location ${{ github.event.inputs.location }}
        echo "‚úÖ Resource Group created"

    - name: üíæ Create Azure SQL Server
      run: |
        SQL_SERVER_NAME="vermillion-sql-$(date +%s)"
        SQL_ADMIN_USER="sqladmin"
        SQL_ADMIN_PASSWORD="${{ secrets.SQL_ADMIN_PASSWORD }}"
        
        az sql server create \
          --name $SQL_SERVER_NAME \
          --resource-group ${{ github.event.inputs.resource_group }} \
          --location ${{ github.event.inputs.location }} \
          --admin-user $SQL_ADMIN_USER \
          --admin-password $SQL_ADMIN_PASSWORD
        
        echo "SQL_SERVER_NAME=$SQL_SERVER_NAME" >> $GITHUB_ENV
        echo "‚úÖ SQL Server created: $SQL_SERVER_NAME"

    - name: üî• Configure SQL Server Firewall
      run: |
        # Allow Azure services
        az sql server firewall-rule create \
          --resource-group ${{ github.event.inputs.resource_group }} \
          --server ${{ env.SQL_SERVER_NAME }} \
          --name AllowAzureServices \
          --start-ip-address 0.0.0.0 \
          --end-ip-address 0.0.0.0
        
        echo "‚úÖ Firewall rule created"

    - name: üíø Create SQL Database
      run: |
        az sql db create \
          --resource-group ${{ github.event.inputs.resource_group }} \
          --server ${{ env.SQL_SERVER_NAME }} \
          --name AttendanceDB \
          --service-objective Basic \
          --backup-storage-redundancy Local \
          --no-wait
        
        echo "‚úÖ Database creation started"

    - name: üåê Create App Service Plan
      run: |
        az appservice plan create \
          --name vermillion-attendance-plan \
          --resource-group ${{ github.event.inputs.resource_group }} \
          --location ${{ github.event.inputs.location }} \
          --sku B1 \
          --is-linux
        
        echo "‚úÖ App Service Plan created"

    - name: üöÄ Create Web App (Backend)
      run: |
        WEBAPP_NAME="vermillion-api-$(date +%s)"
        
        az webapp create \
          --name $WEBAPP_NAME \
          --resource-group ${{ github.event.inputs.resource_group }} \
          --plan vermillion-attendance-plan \
          --runtime "DOTNET:8.0"
        
        echo "WEBAPP_NAME=$WEBAPP_NAME" >> $GITHUB_ENV
        echo "‚úÖ Web App created: $WEBAPP_NAME"

    - name: üîó Configure Connection String
      run: |
        CONNECTION_STRING="Server=tcp:${{ env.SQL_SERVER_NAME }}.database.windows.net,1433;Initial Catalog=AttendanceDB;User ID=sqladmin;Password=${{ secrets.SQL_ADMIN_PASSWORD }};Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;"
        
        az webapp config connection-string set \
          --name ${{ env.WEBAPP_NAME }} \
          --resource-group ${{ github.event.inputs.resource_group }} \
          --connection-string-type SQLAzure \
          --settings DefaultConnection="$CONNECTION_STRING"
        
        echo "‚úÖ Connection string configured"

    - name: ‚öôÔ∏è Configure App Settings
      run: |
        az webapp config appsettings set \
          --name ${{ env.WEBAPP_NAME }} \
          --resource-group ${{ github.event.inputs.resource_group }} \
          --settings \
            ASPNETCORE_ENVIRONMENT="Production" \
            WEBSITE_RUN_FROM_PACKAGE="1"
        
        echo "‚úÖ App settings configured"

    - name: üì± Create Static Web App (Frontend)
      run: |
        STATIC_APP_NAME="vermillion-web-$(date +%s)"
        
        az staticwebapp create \
          --name $STATIC_APP_NAME \
          --resource-group ${{ github.event.inputs.resource_group }} \
          --location ${{ github.event.inputs.location }} \
          --sku Free
        
        echo "STATIC_APP_NAME=$STATIC_APP_NAME" >> $GITHUB_ENV
        echo "‚úÖ Static Web App created: $STATIC_APP_NAME"

    - name: üìù Get Deployment URLs
      run: |
        BACKEND_URL="https://${{ env.WEBAPP_NAME }}.azurewebsites.net"
        STATIC_APP_URL=$(az staticwebapp show \
          --name ${{ env.STATIC_APP_NAME }} \
          --resource-group ${{ github.event.inputs.resource_group }} \
          --query "defaultHostname" -o tsv)
        
        echo "=========================================="
        echo "‚úÖ INFRASTRUCTURE CREATED SUCCESSFULLY!"
        echo "=========================================="
        echo ""
        echo "üì± Frontend URL: https://$STATIC_APP_URL"
        echo "üîß Backend URL: $BACKEND_URL"
        echo "üíæ SQL Server: ${{ env.SQL_SERVER_NAME }}.database.windows.net"
        echo ""
        echo "=========================================="
        echo "üìã NEXT STEPS:"
        echo "=========================================="
        echo ""
        echo "1. Add these secrets to your GitHub repository:"
        echo "   - Go to: Settings ‚Üí Secrets and variables ‚Üí Actions"
        echo ""
        echo "2. Add AZURE_WEBAPP_PUBLISH_PROFILE:"
        echo "   Run: az webapp deployment list-publishing-profiles --name ${{ env.WEBAPP_NAME }} --resource-group ${{ github.event.inputs.resource_group }} --xml"
        echo ""
        echo "3. Add AZURE_STATIC_WEB_APPS_API_TOKEN:"
        echo "   Run: az staticwebapp secrets list --name ${{ env.STATIC_APP_NAME }} --resource-group ${{ github.event.inputs.resource_group }}"
        echo ""
        echo "4. Update frontend/src/environments/environment.prod.ts:"
        echo "   apiUrl: '$BACKEND_URL/api'"
        echo ""
        echo "5. Push code to trigger automatic deployment!"
        echo "=========================================="
        echo ""
        echo "üí∞ Monthly Cost: ~$18 USD"
        echo "üåç Location: ${{ github.event.inputs.location }}"
        echo "=========================================="
